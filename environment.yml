# Windows-compatible Conda environment for RL-MESH-GENERATION
# This version fixes CUDA dependency issues on Windows
#
# Usage:
#   conda env create -f environment-windows.yml
#   conda activate rl-mesh-generation

name: rl-mesh-generation

channels:
  - pytorch
  - nvidia  # Added nvidia channel for CUDA packages
  - conda-forge
  - defaults

dependencies:
  # Python version
  - python=3.9

  # PyTorch with CUDA (Windows compatible)
  - pytorch>=1.12.0
  - torchvision>=0.13.0
  - torchaudio>=0.12.0
  - pytorch-cuda=11.8  # Changed to 11.8 which is more widely available

  # Alternative: uncomment for CPU-only
  # - pytorch-cpu>=1.12.0
  # - torchvision-cpu>=0.13.0

  # Scientific computing stack
  - numpy>=1.21.0
  - scipy>=1.7.0
  - pandas>=1.3.0

  # Visualization and plotting
  - matplotlib>=3.5.0
  - seaborn>=0.11.0

  # Configuration and data handling
  - pyyaml>=6.0

  # Development and utility tools
  - tqdm>=4.62.0
  - joblib>=1.1.0

  # Jupyter for interactive development (optional)
  - jupyter
  - jupyterlab
  - ipywidgets

  # Testing framework
  - pytest>=6.0.0
  - pytest-cov>=3.0.0

  # Code quality tools
  - black>=22.0.0
  - isort>=5.0.0
  - flake8>=4.0.0

  # Build tools
  - pip
  - setuptools
  - wheel

  # Dependencies that need to be installed via pip
  - pip:
    # Reinforcement learning
    - gymnasium>=0.26.0

    # Geometry and computational geometry
    - shapely>=1.8.0

    # Advanced visualization
    - plotly>=5.0.0

    # Tensorboard for logging
    - tensorboard>=2.8.0

    # Mesh processing (optional)
    - meshio>=5.0.0

    # Additional scientific tools
    - scikit-learn>=1.0.0

    # Progress bars and utilities
    - rich>=12.0.0

    # Configuration management
    - hydra-core>=1.1.0

# Environment variables for Windows
variables:
  # CUDA settings for reproducibility
  CUDA_LAUNCH_BLOCKING: "1"

  # Set number of threads for NumPy/OpenMP
  OMP_NUM_THREADS: "4"
  MKL_NUM_THREADS: "4"

  # Python optimization
  PYTHONUNBUFFERED: "1"
  PYTHONIOENCODING: "utf-8"
